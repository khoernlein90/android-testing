{"version":3,"sources":["components/Tooltip/TooltipIcon.js","components/Tooltip/Tooltip.js","App.js","serviceWorker.js","index.js"],"names":["TooltipIcon","SVG","focusable","aria-hidden","tabindex","viewBox","stroke","fill","d","styled","svg","Tooltip","state","buttonId","uuidv4","contentId","isAndroid","showTooltip","setState","prevState","hideTooltip","tooltipClick","tooltipEscape","e","keyCode","navigator","userAgent","toLowerCase","indexOf","this","style","position","Button","id","aria-label","aria-describedby","aria-expanded","onClick","onMouseOver","onMouseOut","onFocus","onBlur","onKeyDown","onDoubleClick","alert","Content","role","props","children","Component","button","span","App","className","height","width","background","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"siBAGO,IAAMA,EAAc,kBACzB,kBAACC,EAAD,CAAKC,UAAU,QAAQC,cAAY,OAAOC,SAAS,KAAKC,QAAQ,aAC9D,2BACE,0BACEC,OAAO,OACPC,KAAK,UACLC,EAAE,0JAMJP,EAAMQ,IAAOC,IAAV,K,m2BC+FMC,E,4MAvGbC,MAAQ,CACNC,SAAUC,cACVC,UAAWD,cACXE,WAAW,EACXC,aAAa,G,EAYfA,YAAc,WASZ,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAAEF,aAAa,O,EAG7CG,YAAc,WASZ,EAAKF,UAAS,SAAAC,GAAS,MAAK,CAAEF,aAAa,O,EAG7CI,aAAe,WAeb,EAAKH,UAAS,SAAAC,GAAS,MAAK,CAAEF,aAAc,EAAKL,MAAMK,iB,EAGzDK,cAAgB,SAAAC,GAKI,KAAdA,EAAEC,SAKJ,EAAKN,UAAS,SAAAC,GAAS,MAAK,CAAEF,aAAa,O,kEA5DlCQ,UAAUC,UAAUC,cACVC,QAAQ,YAAc,GAGzCC,KAAKX,SAAS,CAAEF,WAAW,M,+BA+D7B,OACE,yBAAKc,MAAO,CAAEC,SAAU,aACtB,kBAACC,EAAD,CACEC,GAAIJ,KAAKjB,MAAMC,SACfqB,aAAW,2BACXC,mBAAkBN,KAAKjB,MAAMG,UAC7BqB,gBAAeP,KAAKjB,MAAMK,YAC1BoB,QAASR,KAAKR,aACdiB,YAAaT,KAAKZ,YAClBsB,WAAYV,KAAKT,YACjBoB,QAASX,KAAKZ,YACdwB,OAAQZ,KAAKT,YACbsB,UAAWb,KAAKP,cAChBqB,cAAe,kBAAMC,MAAM,aAE3B,kBAAC,EAAD,OAEDf,KAAKjB,MAAMK,YACV,kBAAC4B,EAAD,CAASZ,GAAIJ,KAAKjB,MAAMG,UAAWZ,eAAc0B,KAAKjB,MAAMK,YAAa6B,KAAK,WAC3EjB,KAAKkB,MAAMC,UAEZ,U,GAjGUC,aA0GhBjB,EAASvB,IAAOyC,OAAV,KAQNL,EAAUpC,IAAO0C,KAAV,K,MCtGEC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKvB,MAAO,CAAEwB,OAAQ,QAASC,MAAO,QAASC,WAAY,SAC3D,gDACA,yBAAK1B,MAAO,CAAE2B,QAAS,UACrB,kBAAC,EAAD,+BCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2ee18cb2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const TooltipIcon = () => (\r\n  <SVG focusable=\"false\" aria-hidden=\"true\" tabindex=\"-1\" viewBox=\"0 0 24 24\">\r\n    <g>\r\n      <path\r\n        stroke=\"none\"\r\n        fill=\"#000000\"\r\n        d=\"M12,22A10,10,0,1,1,22,12,10,10,0,0,1,12,22ZM12,3.43A8.57,8.57,0,1,0,20.57,12,8.59,8.59,0,0,0,12,3.43Zm1.2,7.4H10.8v7.89h2.4Zm0-4.78H10.8V8.16h2.4Z\"\r\n      ></path>\r\n    </g>\r\n  </SVG>\r\n);\r\n\r\nconst SVG = styled.svg`\r\n  background-color: transparent;\r\n  display: inline-block;\r\n  height: 1rem;\r\n  width: 1rem;\r\n  min-height: 1rem;\r\n  min-width: 1rem;\r\n  outline: none;\r\n  pointer-events: none;\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { TooltipIcon } from \"./TooltipIcon\";\r\n\r\nclass Tooltip extends Component {\r\n  state = {\r\n    buttonId: uuidv4(),\r\n    contentId: uuidv4(),\r\n    isAndroid: false,\r\n    showTooltip: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    const ua = navigator.userAgent.toLowerCase();\r\n    const isAndroid = ua.indexOf(\"android\") > -1;\r\n\r\n    if (isAndroid) {\r\n      this.setState({ isAndroid: true });\r\n    }\r\n  }\r\n\r\n  showTooltip = () => {\r\n    // const tooltipButton = document.getElementById(this.state.buttonId);\r\n    // const tooltipContent = document.getElementById(this.state.contentId);\r\n\r\n    // if (tooltipButton && tooltipContent) {\r\n    //   tooltipContent.style.display = \"block\";\r\n    //   tooltipContent.setAttribute(\"aria-hidden\", \"false\");\r\n    //   tooltipButton.setAttribute(\"aria-expanded\", \"true\");\r\n    // }\r\n    this.setState(prevState => ({ showTooltip: true }))\r\n  };\r\n\r\n  hideTooltip = () => {\r\n    // const tooltipButton = document.getElementById(this.state.buttonId);\r\n    // const tooltipContent = document.getElementById(this.state.contentId);\r\n\r\n    // if (tooltipButton && tooltipContent) {\r\n    //   // tooltipContent.style.display = \"none\";\r\n    //   tooltipContent.setAttribute(\"aria-hidden\", \"true\");\r\n    //   tooltipButton.setAttribute(\"aria-expanded\", \"false\");\r\n    // }\r\n    this.setState(prevState => ({ showTooltip: false }))\r\n  };\r\n\r\n  tooltipClick = () => {\r\n    // const tooltipButton = document.getElementById(this.state.buttonId);\r\n    // const tooltipContent = document.getElementById(this.state.contentId);\r\n\r\n    // if (tooltipButton && tooltipContent) {\r\n    //   if (tooltipButton.getAttribute(\"aria-expanded\") === \"true\") {\r\n    //     tooltipContent.style.display = \"none\";\r\n    //     tooltipContent.setAttribute(\"aria-hidden\", \"true\");\r\n    //     tooltipButton.setAttribute(\"aria-expanded\", \"false\");\r\n    //   } else {\r\n    //     tooltipContent.style.display = \"block\";\r\n    //     tooltipContent.setAttribute(\"aria-hidden\", \"false\");\r\n    //     tooltipButton.setAttribute(\"aria-expanded\", \"true\");\r\n    //   }\r\n    // }\r\n    this.setState(prevState => ({ showTooltip: !this.state.showTooltip }))\r\n  };\r\n\r\n  tooltipEscape = e => {\r\n    // const tooltipButton = document.getElementById(this.state.buttonId);\r\n    // const tooltipContent = document.getElementById(this.state.contentId);\r\n\r\n    // if (tooltipButton && tooltipContent) {\r\n    if (e.keyCode === 27) {\r\n      // tooltipContent.style.display = \"none\";\r\n      // tooltipContent.setAttribute(\"aria-hidden\", \"true\");\r\n      // tooltipButton.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n      this.setState(prevState => ({ showTooltip: false }))\r\n\r\n    }\r\n    // }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ position: \"relative\" }}>\r\n        <Button\r\n          id={this.state.buttonId}\r\n          aria-label=\"more information tooltip\"\r\n          aria-describedby={this.state.contentId}\r\n          aria-expanded={this.state.showTooltip}\r\n          onClick={this.tooltipClick}\r\n          onMouseOver={this.showTooltip}\r\n          onMouseOut={this.hideTooltip}\r\n          onFocus={this.showTooltip}\r\n          onBlur={this.hideTooltip}\r\n          onKeyDown={this.tooltipEscape}\r\n          onDoubleClick={() => alert(\"clicked\")}\r\n        >\r\n          <TooltipIcon />\r\n        </Button>\r\n        {this.state.showTooltip ? (\r\n          <Content id={this.state.contentId} aria-hidden={!this.state.showTooltip} role=\"tooltip\">\r\n            {this.props.children}\r\n          </Content>\r\n        ) : null}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tooltip;\r\n\r\nconst Button = styled.button`\r\n  padding: 0;\r\n  border: 0;\r\n  background: 0;\r\n  font-size: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Content = styled.span`\r\n  display: block;\r\n  position: absolute;\r\n  bottom: 24px;\r\n  left: -104px;\r\n  width: 200px;\r\n  background: #fff;\r\n  border: 1px solid;\r\n  padding: 12px;\r\n  font-size: 12px;\r\n  font-family: NeueHaasGroteskDisplay;\r\n  line-height: 14px;\r\n\r\n  ::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    box-sizing: border-box;\r\n    border-right: 0.0625rem solid #000000;\r\n    border-bottom: 0.0625rem solid #000000;\r\n    width: 0.53125rem;\r\n    height: 0.53125rem;\r\n    bottom: -5px;\r\n    background: white;\r\n    left: calc(50% - 0px);\r\n    transform: translate(-50%) rotate(45deg);\r\n    will-change: transform, left;\r\n    z-index: 0;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Tooltip } from \"./components/Tooltip\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ height: \"100px\", width: \"100px\", background: \"red\" }}></div>\r\n      <button>extra button</button>\r\n      <div style={{ padding: \"180px\" }}>\r\n        <Tooltip>\r\n          Testing the tooltip\r\n        </Tooltip>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}