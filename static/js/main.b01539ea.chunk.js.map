{"version":3,"sources":["store/configureStore.js","store/configureStore.prod.js","components/NavigationHelper/actions/setA11yContent.js","components/MockRoutes/RouteOne.js","components/MockRoutes/RouteTwo.js","components/MockRoutes/RouteThree.js","components/NavigationHelper/NavigationHelper.js","App.js","serviceWorker.js","store/reducers.js","components/NavigationHelper/reducers/setA11yContentReducer.js","index.js"],"names":["module","exports","require","configureStore","rootReducer","composeEnhancers","compose","createStore","applyMiddleware","thunk","setA11yContent","screenReaderMessage","title","metaDescription","dispatch","payload","type","RouteOne","setTimeout","props","Component","connect","RouteTwo","this","RouteThree","NavigationHelper","state","currentA11yMessage","prevProps","prevState","setState","ScreenReaderOnly","role","aria-live","aria-atomic","Helmet","name","content","styled","div","Routes","history","createBrowserHistory","style","margin","to","exact","path","component","App","className","height","width","background","Boolean","window","location","hostname","match","combineReducers","store","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b01539ea.chunk.js","sourcesContent":["if (process.env.NODE_ENV === \"production\") {\r\n  module.exports = require(\"./configureStore.prod\");\r\n} else {\r\n  module.exports = require(\"./configureStore.dev\");\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst configureStore = rootReducer => {\r\n  const composeEnhancers = compose;\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n  );\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n","export const SET_A11Y_CONTENT = \"SET_A11Y_CONTENT\";\r\n\r\nexport const setA11yContent = (screenReaderMessage, title, metaDescription) => (dispatch) => {\r\n  const payload = {\r\n    screenReaderMessage\r\n  };\r\n\r\n  if (title) {\r\n    payload.title = title;\r\n  }\r\n\r\n  if (metaDescription) {\r\n    payload.metaDescription = metaDescription;\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_A11Y_CONTENT,\r\n    payload\r\n  });\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setA11yContent } from \"../NavigationHelper/actions\";\r\n\r\nclass RouteOne extends Component {\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.props.setA11yContent(\"route one\");\r\n    }, 2000);\r\n  }\r\n\r\n  render() {\r\n    return <div>route one</div>;\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { setA11yContent }\r\n)(RouteOne);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setA11yContent } from \"../NavigationHelper/actions\";\r\n\r\nclass RouteTwo extends Component {\r\n  componentDidMount() {\r\n    this.props.setA11yContent(\"route two\");\r\n  }\r\n\r\n  render() {\r\n    return <div>route two</div>;\r\n  }\r\n}\r\n\r\nexport default connect(null, { setA11yContent })(RouteTwo);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setA11yContent } from \"../NavigationHelper/actions\";\r\n\r\nclass RouteThree extends Component {\r\n  componentDidMount() {\r\n    this.props.setA11yContent(\"route three\");\r\n  }\r\n\r\n  render() {\r\n    return <div>route three</div>;\r\n  }\r\n}\r\n\r\nexport default connect(null, { setA11yContent })(RouteThree);\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { connect } from \"react-redux\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nclass NavigationHelper extends Component {\r\n  state = {\r\n    currentA11yMessage: \"\"\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.currentA11yMessage !== this.props.currentA11yMessage) {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          currentA11yMessage: this.props.currentA11yMessage\r\n        });\r\n      }, 50);\r\n      setTimeout(() => {\r\n        this.setState({\r\n          currentA11yMessage: \"\"\r\n        });\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { title, metaDescription } = this.props;\r\n    const { currentA11yMessage } = this.state;\r\n\r\n    return (\r\n      <ScreenReaderOnly role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\r\n        {currentA11yMessage ? <span>Navigated to {currentA11yMessage}</span> : \"\"}\r\n        <Helmet>\r\n          <title>{title}</title>\r\n          <meta name=\"description\" content={metaDescription} />\r\n        </Helmet>\r\n      </ScreenReaderOnly>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  currentA11yMessage: { screenReaderMessage: currentA11yMessage, title, metaDescription }\r\n}) => ({\r\n  currentA11yMessage,\r\n  title,\r\n  metaDescription\r\n});\r\n\r\nexport default connect(mapStateToProps)(NavigationHelper);\r\n\r\nconst ScreenReaderOnly = styled.div`\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  padding: 0;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  border: 0;\r\n`;\r\n","import React, { Component } from \"react\";\r\nimport RouteOne from \"./components/MockRoutes/RouteOne\";\r\nimport RouteTwo from \"./components/MockRoutes/RouteTwo\";\r\nimport RouteThree from \"./components/MockRoutes/RouteThree\";\r\nimport { Route, Switch, Router, Link } from \"react-router-dom\";\r\nimport NavigationHelper from \"./components/NavigationHelper/NavigationHelper\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nconst Routes = () => (\r\n  <Router history={createBrowserHistory()}>\r\n    <Link style={{ margin: \"0 15px\" }} to=\"/android-testing/one\">\r\n      one\r\n    </Link>\r\n    <Link style={{ margin: \"0 15px\" }} to=\"/android-testing/two\">\r\n      two\r\n    </Link>\r\n    <Link style={{ margin: \"0 15px\" }} to=\"/android-testing/three\">\r\n      three\r\n    </Link>\r\n    <NavigationHelper />\r\n    <Switch>\r\n      <Route exact path=\"/android-testing/one\" component={RouteOne} />\r\n      <Route exact path=\"/android-testing/two\" component={RouteTwo} />\r\n      <Route exact path=\"/android-testing/three\" component={RouteThree} />\r\n    </Switch>\r\n  </Router>\r\n);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div style={{ height: \"100px\", width: \"100px\", background: \"red\" }} />\r\n        <Routes />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\r\nimport currentA11yMessage from \"../components/NavigationHelper/reducers/setA11yContentReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  currentA11yMessage,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { SET_A11Y_CONTENT } from \"../actions/setA11yContent\";\r\n\r\nexport default (\r\n  state = {\r\n    screenReaderMessage: \"\",\r\n    title: \"Verizon Privacy Dashboard\",\r\n    metaDescription:\r\n      \"Know what you share with us. Download your information, delete what's not necessary for service, and access privacy controls all from your dashboard.\"\r\n  },\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case SET_A11Y_CONTENT:\r\n      return {\r\n        ...state,\r\n        ...payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from \"./store/reducers\";\nimport configureStore from \"./store/configureStore\"\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}